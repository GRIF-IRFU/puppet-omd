#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# <<<postgres_sessions>>>
# f 1
# t 4

# t -> idle sessions, f -> active sessions
# Note: one (or both?) lines might be missing. They will never show 0.

def inventory_postgres_sessions(info):
    # inventorize only if at least one idle or active session exist
    if info:
        return [(None, {})]

def check_postgres_sessions(_no_item, params, info):
    parsed = dict(info)
    idle = int(parsed.get('t', 0))
    running = int(parsed.get('f', 0))
    total = idle + running

    status = 0
    infos = []
    perfdata = []
    for value, what, format, unit in [
        ( total,   "total",       "%d",   "" ),
        ( running, "running",     "%d",   "" )]:
        infos.append((format + " %s%s") % (value, what, unit))
        if what in params:
            warn, crit = params[what]
            if value >= crit:
                status = 2
                infos[-1] += "(!!)"
            elif value >= warn:
                status = max(status, 1)
                infos[-1] += "(!)"
        else:
            warn, crit = None, None
        perfdata.append((what, value, warn, crit))

    return (status, ", ".join(infos), perfdata)


check_info['postgres_sessions'] = {
    "check_function"          : check_postgres_sessions,
    "inventory_function"      : inventory_postgres_sessions,
    "service_description"     : "PostgreSQL Daemon Sessions",
    "has_perfdata"            : True,
    "group"                   : "postgres_sessions",
}
