#!/usr/bin/env python
#
# Check_MK APT-NG Plugin - Check for upgradeable packages.
#
# Copyright 2012, Stefan Schlesinger <sts@ono.at>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Example Agent Output:
#
#  <<<apt>>>
#  2882
#  6.0.3
#  x11-common Debian-Security:6.0/stable

# Configure per repository severity
#
# 1 WARNING ; 2 CRITICAL 
apt_repository_severity = {
  'Debian-Security' : 2,
  'debian-volatile' : 1,
  'Unofficial'      : 1,
  '__default__'     : 1,
}

# Configure the maximum age of the apt-cache, default: 9hr 
apt_cache_max_age = 32400 


def inventory_apt(checkname, info):
    if len(info) > 0:
        return [('Upgrades', None)]

# the check function
# the check function (dummy)
def check_apt(item, params, info):
    apt_upgrades = {}
    level        = 0
    msg          = ""

    # Parse the agent output
    mod_time     = int(info[0][0])
    deb_release  = info[1][0]

    # If there are upgrades available parse them.
    if len(info) > 2:
        packages  = info[2:]

        for package in packages:
            name   = package[0]
            # agent format: Debian-Security:6.0/stable
            source = package[1].split(' ')[0].split(':')[0]

            # Determine the severity of the situation :-)
            if source in apt_repository_severity:
                level  = max(level, apt_repository_severity[source])
            else:
                level  = max(level, apt_repository_severity['__default__'])

            # Append to list of upgrades
            if not source in apt_upgrades:
                apt_upgrades[source] = []

            apt_upgrades[source].append(name)

    for source in apt_upgrades:
        msg += "%s/%s [%s] " % (source, len(apt_upgrades[source]), ",".join(apt_upgrades[source]))

    # Determine apt cache age
    if mod_time > apt_cache_max_age:
        level = 1
        msg   = "Package cache is out of date, %s seconds since last update." % mod_time

    return (level, "%s" % msg)


# declare the check to Check_MK
check_info['apt'] = \
      (check_apt, "APT", 0, inventory_apt)
